using Prometheus.DotNetRuntime.EventListening;
using Prometheus.DotNetRuntime.Metrics;

namespace Prometheus.DotNetRuntime
{
    /// <summary>
    /// Used to communicate that a <see cref="IMetricProducer"/> depends on the events generated by an <see cref="IEventParser{TEvents}"/> or <see cref="IEventCounterParser{TCounters}"/>.
    /// </summary>
    /// <typeparam name="TEvents"></typeparam>
    public interface Consumes<TEvents>
        where TEvents : IEvents
    {
        public TEvents Events { get; }
        
        /// <summary>
        /// Indicates if the events of <typeparamref name="TEvents"/> will be produced and can be listened to.
        /// </summary>
        /// <remarks>
        /// As event parsers may or may not be enabled (or enabled at lower event levels), we need a mechanism to indicate if
        /// events are available or not to generate metrics from.
        /// </remarks>
        public bool Enabled { get; }
    }

    internal class EventConsumer<T> : Consumes<T>
        where T : IEvents
    {
        public EventConsumer()
        {
            Enabled = false;
        }

        public EventConsumer(T events)
        {
            Events = events;
            Enabled = true;
        }
        
        public T Events { get; }
        public bool Enabled { get; set; }
    }
}